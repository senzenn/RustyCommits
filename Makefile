# Auto-generated Makefile for RUST Development
# Generated by Neovim auto-makefile plugin

# Project Configuration
PROJECT_NAME := rusty-commit
CARGO := cargo
ANCHOR := anchor
SOLANA := solana

# Build Configuration
PROFILE ?= debug
TARGET_DIR := target
BUILD_DIR := $(TARGET_DIR)/$(PROFILE)

# Colors
GREEN := \033[0;32m
YELLOW := \033[1;33m
RED := \033[0;31m
NC := \033[0m

# Default target
.PHONY: default
default: help

# Help target
.PHONY: help
help:
	@echo "$(GREEN)Available targets for $(PROJECT_NAME):$(NC)"
	@echo ""
	@echo "$(YELLOW)Basic Commands:$(NC)"
	@echo "  build       - Build the project"
	@echo "  run         - Run the project"
	@echo "  test        - Run tests"
	@echo "  clean       - Clean build artifacts"
	@echo "  check       - Check code without building"
	@echo "  fmt         - Format code"
	@echo "  clippy      - Run clippy linter"
	@echo ""
	@echo "$(YELLOW)Development:$(NC)"
	@echo "  dev         - Development build with watching"
	@echo "  release     - Build optimized release version"
	@echo "  doc         - Generate documentation"
	@echo ""
	@echo "$(YELLOW)Testing:$(NC)"
	@echo "  test-unit   - Run unit tests only"
	@echo "  test-int    - Run integration tests only"
	@echo "  test-all    - Run all tests with output"
	@echo ""
	@echo "$(YELLOW)Utility:$(NC)"
	@echo "  install     - Install the binary"
	@echo "  update      - Update dependencies"
	@echo "  info        - Show project information"
# Basic Rust/Cargo commands
.PHONY: build
build:
	@echo "$(GREEN)Building $(PROJECT_NAME)...$(NC)"
	$(CARGO) build

.PHONY: run
run:
	@echo "$(GREEN)Running $(PROJECT_NAME)...$(NC)"
	$(CARGO) run

.PHONY: test
test:
	@echo "$(GREEN)Running tests...$(NC)"
	$(CARGO) test

.PHONY: clean
clean:
	@echo "$(GREEN)Cleaning build artifacts...$(NC)"
	$(CARGO) clean
	@echo "$(GREEN)Clean complete.$(NC)"

.PHONY: check
check:
	@echo "$(GREEN)Checking code...$(NC)"
	$(CARGO) check

.PHONY: fmt
fmt:
	@echo "$(GREEN)Formatting code...$(NC)"
	$(CARGO) fmt

.PHONY: clippy
clippy:
	@echo "$(GREEN)Running clippy...$(NC)"
	$(CARGO) clippy -- -D warnings

# Development targets
.PHONY: dev
dev:
	@echo "$(GREEN)Starting development build...$(NC)"
	@if command -v cargo-watch >/dev/null 2>&1; then \
		cargo watch -x build; \
	else \
		echo "$(YELLOW)cargo-watch not found. Install: cargo install cargo-watch$(NC)"; \
		$(CARGO) build; \
	fi

.PHONY: release
release:
	@echo "$(GREEN)Building optimized release...$(NC)"
	$(CARGO) build --release

.PHONY: doc
doc:
	@echo "$(GREEN)Generating documentation...$(NC)"
	$(CARGO) doc --open

# Testing targets
.PHONY: test-unit
test-unit:
	@echo "$(GREEN)Running unit tests...$(NC)"
	$(CARGO) test --lib

.PHONY: test-int
test-int:
	@echo "$(GREEN)Running integration tests...$(NC)"
	$(CARGO) test --tests

.PHONY: test-all
test-all:
	@echo "$(GREEN)Running all tests with output...$(NC)"
	$(CARGO) test -- --nocapture

# Utility targets
.PHONY: install
install:
	@echo "$(GREEN)Installing $(PROJECT_NAME)...$(NC)"
	$(CARGO) install --path .

.PHONY: update
update:
	@echo "$(GREEN)Updating dependencies...$(NC)"
	$(CARGO) update

.PHONY: info
info:
	@echo "$(GREEN)Project Information:$(NC)"
	@echo "Name: $(PROJECT_NAME)"
	@echo "Type: rust project"
	@if [ -f "Cargo.toml" ]; then \
		echo "Version: $$(grep '^version = ' Cargo.toml | head -n1 | sed 's/version = \"\(.*\)\"/\1/')"; \
	fi
	@echo "Build Directory: $(BUILD_DIR)"

# Watch targets for development
.PHONY: watch-test
watch-test:
	@if command -v cargo-watch >/dev/null 2>&1; then \
		cargo watch -x test; \
	else \
		echo "$(YELLOW)cargo-watch not found. Install: cargo install cargo-watch$(NC)"; \
	fi

.PHONY: watch-run
watch-run:
	@if command -v cargo-watch >/dev/null 2>&1; then \
		cargo watch -x run; \
	else \
		echo "$(YELLOW)cargo-watch not found. Install: cargo install cargo-watch$(NC)"; \
	fi
